const jsonData = {
  title: 'Next Gen Report',
  collectedItems: 10,
  environment: {
    Python: '3.7.7',
    Platform: 'Darwin-19.6.0-x86_64-i386-64bit',
    Packages: { pytest: '6.1.2', py: '1.9.0', pluggy: '0.13.1' },
    Plugins: { metadata: '1.11.0', reportlog: '0.1.2', html: '2.1.2.dev78' },
  },
  tests: [
    {
      nodeid: 'test_html.py::test_url',
      location: ['test_html.py', 3, 'test_url'],
      keywords: { test_url: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.0001576979999999839,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url',
      location: ['test_html.py', 3, 'test_url'],
      keywords: { test_url: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'failed',
      extras: [
        {
          name: 'Snapshot',
          format_type: 'image',
          content: 'snapshot_of_what_went_wrong.png',
          mime_type: 'image/png',
          extension: '.png',
        },
        {
          name: 'Google',
          format_type: 'url',
          content: 'https://search.yahoo.com/',
          mime_type: null,
          extension: null,
        },
      ],
      longrepr: {
        reprcrash: {
          path: '/Users/jimbrannlund/dev/pytest-dev/testing-html/test_html.py',
          lineno: 12,
          message: 'assert False',
        },
        reprtraceback: {
          reprentries: [
            {
              type: 'ReprEntry',
              data: {
                lines: [
                  'universe = <pytest_setup.database.TestDataCollection object at 0x7fe2cf1c4dd8>',
                  'driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="2c586c44-7cb6-8e48-86fd-ae2d2982a3bd")>',
                  '',
                  '@pytest.mark.user(name="Bob", account=\'Rolfs Account\')',
                  "@pytest.mark.setup_data({'EnterpriseProject': [{'name': 'Dependencies', 'user': 'Bob'}]},",
                  "{'Activity': [",
                  "{'name': 'Move',",
                  "'project': 'Dependencies',",
                  "'user': 'Bob',",
                  "'dates': {'start_date': 1, 'end_date': 7}},",
                  "{'name': 'Nope',",
                  "'project': 'Dependencies',",
                  "'user': 'Bob',",
                  "'dates': {'start_date': 8, 'end_date': 14}}]})",
                  'def test_dependency_forces_date_change(universe, driver):',
                  'from test_automation.tools.date_handling import convert_to_correct_date',
                  '    ',
                  '_to_depend_on = "Move"',
                  "_expected_dates = {'start_date': convert_to_correct_date(15), 'end_date': convert_to_correct_date(21)}",
                  '    ',
                  "_user = universe.get('User', 'Bob')",
                  "_act = universe.get('Activity', 'Move')",
                  '    ',
                  'ActivityDetailsPane(driver).',
                  "go_to_page(universe.get('User', 'Bob'),",
                  "universe.get('EnterpriseProject', 'Dependencies'),",
                  'universe.get("Activity", "Nope")). ',
                  "open_activity('Move'). ",
                  ">           open_activity('Nope'). ",
                  'open_widgets_section(). ',
                  "get_widget('planletdependencies').",
                  'add_predecessor(_to_depend_on).',
                  "get_details_pane('activity').",
                  'close_details_pane().',
                  'click_planlet_checkbox(_act.id).',
                  "get_widget('date').",
                  'verify_dates(_expected_dates)',
                  '',
                  'test_automation/tests/ui_tests/plan_tests/activity_details_pane_test.py:121: ',
                  '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ',
                  'test_automation/page_objects/details_panes/activity_details_pane.py:241: in open_widgets_section',
                  '_wait_for_plus_sign()',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/basepage/decorators.py:112: in wait_handler',
                  'value = func(*args, **kwargs)',
                  'test_automation/page_objects/details_panes/activity_details_pane.py:236: in _wait_for_plus_sign',
                  'if self.get_present_element(self._plus_sign_locator):',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/basepage/base_page.py:422: in get_present_element',
                  'return self._get(locator, expected_condition, params, timeout, error_msg, parent)',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/basepage/base_page.py:569: in _get',
                  'return WebDriverWait(_driver, timeout).until(exp_cond, error_msg)',
                  '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ',
                  '',
                  'self = <selenium.webdriver.support.wait.WebDriverWait (session="2c586c44-7cb6-8e48-86fd-ae2d2982a3bd")>',
                  'method = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fe2cf1a7240>',
                  'message = "Element was never present!\nLocator of type <CSS_SELECTOR> with selector <.pp-rounded-btn__icon.category-bck-3> with ...nExpected condition: <class \'selenium.webdriver.support.expected_conditions.presence_of_element_located\'>\nTimeout: 30"',
                  '',
                  "def until(self, method, message=''):",
                  '"""Calls the method provided with the driver as an argument until the ',
                  'return value is not False."""',
                  'screen = None',
                  'stacktrace = None',
                  '    ',
                  'end_time = time.time() + self._timeout',
                  'while True:',
                  'try:',
                  'value = method(self._driver)',
                  'if value:',
                  'return value',
                  'except self._ignored_exceptions as exc:',
                  "screen = getattr(exc, 'screen', None)",
                  "stacktrace = getattr(exc, 'stacktrace', None)",
                  'time.sleep(self._poll)',
                  'if time.time() > end_time:',
                  'break',
                  '>       raise TimeoutException(message, screen, stacktrace)',
                  'E       selenium.common.exceptions.TimeoutException: Message: Element was never present!',
                  'E       Locator of type <CSS_SELECTOR> with selector <.pp-rounded-btn__icon.category-bck-3> with params <None>',
                  "E       Expected condition: <class 'selenium.webdriver.support.expected_conditions.presence_of_element_located'>",
                  'E       Timeout: 30',
                  '',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException',
                  '------------------------------- pytest-selenium --------------------------------',
                  'Driver log: /private/var/folders/nt/zg2hyyxj6k77sf_qk34xtqf40000gn/T/pytest-of-vgustafsson/pytest-12/test_dependency_forces_date_ch0/driver.log',
                  'URL: https://local.rnd.projectplace.com/#project/79788/plan/28838',
                  'WARNING: Failed to gather log types: Message: HTTP method not allowed',
                  '',
                  '----------------------------- Additional Reporting -----------------------------',
                  'Window size: width <1680>, height <983>',
                  "WARNING: Failed to get HAR: 'NoneType' object has no attribute 'har'",
                  'Logs can be found here: http://elk.rnd.projectplace.com/goto/152df50b1a44ad0',
                ],
                reprfuncargs: { args: [] },
                reprlocals: null,
                reprfileloc: {
                  path: 'test_html.py',
                  lineno: 12,
                  message: 'AssertionError',
                },
                style: 'long',
              },
            },
          ],
          extraline: null,
          style: 'long',
        },
        sections: [],
        chain: [
          [
            {
              reprentries: [
                {
                  type: 'ReprEntry',
                  data: {
                    lines: [
                      '    def test_url():',
                      '        """',
                      '            bla bla bla bla',
                      '            alb alb alb',
                      '            @param: hello',
                      '            :param just',
                      '        """',
                      '        # driver.get("https://www.google.com")',
                      '>       assert False',
                      'E       assert False',
                    ],
                    reprfuncargs: { args: [] },
                    reprlocals: null,
                    reprfileloc: {
                      path: 'test_html.py',
                      lineno: 12,
                      message: 'AssertionError',
                    },
                    style: 'long',
                  },
                },
              ],
              extraline: null,
              style: 'long',
            },
            {
              path:
                '/Users/jimbrannlund/dev/pytest-dev/testing-html/test_html.py',
              lineno: 12,
              message: 'assert False',
            },
            null,
          ],
        ],
      },
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00020797699999997032,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url',
      location: ['test_html.py', 3, 'test_url'],
      keywords: { test_url: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 0.0001561270000000059,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url2',
      location: ['test_html.py', 14, 'test_url2'],
      keywords: { test_url2: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url2',
      location: ['test_html.py', 14, 'test_url2'],
      keywords: { test_url2: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url2',
      location: ['test_html.py', 14, 'test_url2'],
      keywords: { test_url2: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url4',
      location: ['test_html.py', 14, 'test_url4'],
      keywords: { test_url4: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url4',
      location: ['test_html.py', 14, 'test_url4'],
      keywords: { test_url4: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url4',
      location: ['test_html.py', 14, 'test_url4'],
      keywords: { test_url4: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url5',
      location: ['test_html.py', 14, 'test_url5'],
      keywords: { test_url5: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url5',
      location: ['test_html.py', 14, 'test_url5'],
      keywords: { test_url5: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url5',
      location: ['test_html.py', 14, 'test_url5'],
      keywords: { test_url5: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url6',
      location: ['test_html.py', 14, 'test_url6'],
      keywords: { test_url6: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url6',
      location: ['test_html.py', 14, 'test_url6'],
      keywords: { test_url6: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url6',
      location: ['test_html.py', 14, 'test_url6'],
      keywords: { test_url6: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url7',
      location: ['test_html.py', 14, 'test_url7'],
      keywords: { test_url7: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url7',
      location: ['test_html.py', 14, 'test_url7'],
      keywords: { test_url7: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url7',
      location: ['test_html.py', 14, 'test_url7'],
      keywords: { test_url7: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url8',
      location: ['test_html.py', 14, 'test_url8'],
      keywords: { test_url8: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url8',
      location: ['test_html.py', 14, 'test_url8'],
      keywords: { test_url8: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url8',
      location: ['test_html.py', 14, 'test_url8'],
      keywords: { test_url8: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url9',
      location: ['test_html.py', 14, 'test_url9'],
      keywords: { test_url9: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url9',
      location: ['test_html.py', 14, 'test_url9'],
      keywords: { test_url9: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url9',
      location: ['test_html.py', 14, 'test_url9'],
      keywords: { test_url9: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url10',
      location: ['test_html.py', 14, 'test_url10'],
      keywords: { test_url10: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.00010436599999996687,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url10',
      location: ['test_html.py', 14, 'test_url10'],
      keywords: { test_url10: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00011543000000002746,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url10',
      location: ['test_html.py', 14, 'test_url10'],
      keywords: { test_url10: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 9.126600000003426,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url112',
      location: ['test_html.py', 3, 'test_url112'],
      keywords: { test_url112: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'setup',
      user_properties: [],
      sections: [],
      duration: 0.0001576979999999839,
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url112',
      location: ['test_html.py', 3, 'test_url112'],
      keywords: { test_url112: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'failed',
      extras: [
        {
          name: 'Snapshot',
          format_type: 'image',
          content: 'snapshot_of_what_went_wrong.png',
          mime_type: 'image/png',
          extension: '.png',
        },
        {
          name: 'Google',
          format_type: 'url',
          content: 'https://search.yahoo.com/',
          mime_type: null,
          extension: null,
        },
      ],
      longrepr: {
        reprcrash: {
          path: '/Users/jimbrannlund/dev/pytest-dev/testing-html/test_html.py',
          lineno: 12,
          message: 'assert False',
        },
        reprtraceback: {
          reprentries: [
            {
              type: 'ReprEntry',
              data: {
                lines: [
                  'universe = <pytest_setup.database.TestDataCollection object at 0x7fe2cf1c4dd8>',
                  'driver = <selenium.webdriver.firefox.webdriver.WebDriver (session="2c586c44-7cb6-8e48-86fd-ae2d2982a3bd")>',
                  '',
                  '@pytest.mark.user(name="Bob", account=\'Rolfs Account\')',
                  "@pytest.mark.setup_data({'EnterpriseProject': [{'name': 'Dependencies', 'user': 'Bob'}]},",
                  "{'Activity': [",
                  "{'name': 'Move',",
                  "'project': 'Dependencies',",
                  "'user': 'Bob',",
                  "'dates': {'start_date': 1, 'end_date': 7}},",
                  "{'name': 'Nope',",
                  "'project': 'Dependencies',",
                  "'user': 'Bob',",
                  "'dates': {'start_date': 8, 'end_date': 14}}]})",
                  'def test_dependency_forces_date_change(universe, driver):',
                  'from test_automation.tools.date_handling import convert_to_correct_date',
                  '    ',
                  '_to_depend_on = "Move"',
                  "_expected_dates = {'start_date': convert_to_correct_date(15), 'end_date': convert_to_correct_date(21)}",
                  '    ',
                  "_user = universe.get('User', 'Bob')",
                  "_act = universe.get('Activity', 'Move')",
                  '    ',
                  'ActivityDetailsPane(driver).',
                  "go_to_page(universe.get('User', 'Bob'),",
                  "universe.get('EnterpriseProject', 'Dependencies'),",
                  'universe.get("Activity", "Nope")). ',
                  "open_activity('Move'). ",
                  ">           open_activity('Nope'). ",
                  'open_widgets_section(). ',
                  "get_widget('planletdependencies').",
                  'add_predecessor(_to_depend_on).',
                  "get_details_pane('activity').",
                  'close_details_pane().',
                  'click_planlet_checkbox(_act.id).',
                  "get_widget('date').",
                  'verify_dates(_expected_dates)',
                  '',
                  'test_automation/tests/ui_tests/plan_tests/activity_details_pane_test.py:121: ',
                  '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ',
                  'test_automation/page_objects/details_panes/activity_details_pane.py:241: in open_widgets_section',
                  '_wait_for_plus_sign()',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/basepage/decorators.py:112: in wait_handler',
                  'value = func(*args, **kwargs)',
                  'test_automation/page_objects/details_panes/activity_details_pane.py:236: in _wait_for_plus_sign',
                  'if self.get_present_element(self._plus_sign_locator):',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/basepage/base_page.py:422: in get_present_element',
                  'return self._get(locator, expected_condition, params, timeout, error_msg, parent)',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/basepage/base_page.py:569: in _get',
                  'return WebDriverWait(_driver, timeout).until(exp_cond, error_msg)',
                  '_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ',
                  '',
                  'self = <selenium.webdriver.support.wait.WebDriverWait (session="2c586c44-7cb6-8e48-86fd-ae2d2982a3bd")>',
                  'method = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x7fe2cf1a7240>',
                  'message = "Element was never present!\nLocator of type <CSS_SELECTOR> with selector <.pp-rounded-btn__icon.category-bck-3> with ...nExpected condition: <class \'selenium.webdriver.support.expected_conditions.presence_of_element_located\'>\nTimeout: 30"',
                  '',
                  "def until(self, method, message=''):",
                  '"""Calls the method provided with the driver as an argument until the ',
                  'return value is not False."""',
                  'screen = None',
                  'stacktrace = None',
                  '    ',
                  'end_time = time.time() + self._timeout',
                  'while True:',
                  'try:',
                  'value = method(self._driver)',
                  'if value:',
                  'return value',
                  'except self._ignored_exceptions as exc:',
                  "screen = getattr(exc, 'screen', None)",
                  "stacktrace = getattr(exc, 'stacktrace', None)",
                  'time.sleep(self._poll)',
                  'if time.time() > end_time:',
                  'break',
                  '>       raise TimeoutException(message, screen, stacktrace)',
                  'E       selenium.common.exceptions.TimeoutException: Message: Element was never present!',
                  'E       Locator of type <CSS_SELECTOR> with selector <.pp-rounded-btn__icon.category-bck-3> with params <None>',
                  "E       Expected condition: <class 'selenium.webdriver.support.expected_conditions.presence_of_element_located'>",
                  'E       Timeout: 30',
                  '',
                  '/Users/vgustafsson/.virtualenvs/pytest/lib/python3.7/site-packages/selenium/webdriver/support/wait.py:80: TimeoutException',
                  '------------------------------- pytest-selenium --------------------------------',
                  'Driver log: /private/var/folders/nt/zg2hyyxj6k77sf_qk34xtqf40000gn/T/pytest-of-vgustafsson/pytest-12/test_dependency_forces_date_ch0/driver.log',
                  'URL: https://local.rnd.projectplace.com/#project/79788/plan/28838',
                  'WARNING: Failed to gather log types: Message: HTTP method not allowed',
                  '',
                  '----------------------------- Additional Reporting -----------------------------',
                  'Window size: width <1680>, height <983>',
                  "WARNING: Failed to get HAR: 'NoneType' object has no attribute 'har'",
                  'Logs can be found here: http://elk.rnd.projectplace.com/goto/152df50b1a44ad0',
                ],
                reprfuncargs: { args: [] },
                reprlocals: null,
                reprfileloc: {
                  path: 'test_html.py',
                  lineno: 12,
                  message: 'AssertionError',
                },
                style: 'long',
              },
            },
          ],
          extraline: null,
          style: 'long',
        },
        sections: [],
        chain: [
          [
            {
              reprentries: [
                {
                  type: 'ReprEntry',
                  data: {
                    lines: [
                      '    def test_url112():',
                      '        """',
                      '            bla bla bla bla',
                      '            alb alb alb',
                      '            @param: hello',
                      '            :param just',
                      '        """',
                      '        # driver.get("https://www.google.com")',
                      '>       assert False',
                      'E       assert False',
                    ],
                    reprfuncargs: { args: [] },
                    reprlocals: null,
                    reprfileloc: {
                      path: 'test_html.py',
                      lineno: 12,
                      message: 'AssertionError',
                    },
                    style: 'long',
                  },
                },
              ],
              extraline: null,
              style: 'long',
            },
            {
              path:
                '/Users/jimbrannlund/dev/pytest-dev/testing-html/test_html.py',
              lineno: 12,
              message: 'assert False',
            },
            null,
          ],
        ],
      },
      when: 'call',
      user_properties: [],
      sections: [],
      duration: 0.00020797699999997032,
      extra: [],
      $report_type: 'TestReport',
    },
    {
      nodeid: 'test_html.py::test_url112',
      location: ['test_html.py', 3, 'test_url112'],
      keywords: { test_url112: 1, 'testing-html': 1, 'test_html.py': 1 },
      outcome: 'passed',
      longrepr: null,
      when: 'teardown',
      user_properties: [],
      sections: [],
      duration: 0.0001561270000000059,
      $report_type: 'TestReport',
    },
  ],
};
